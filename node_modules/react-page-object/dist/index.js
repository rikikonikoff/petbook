(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("enzyme"));
	else if(typeof define === 'function' && define.amd)
		define(["enzyme"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("enzyme")) : factory(root["enzyme"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _enzyme = __webpack_require__(2);

	var _findWrapperMethods = __webpack_require__(3);

	var findWrapperMethods = _interopRequireWildcard(_findWrapperMethods);

	var _interactionMethods = __webpack_require__(5);

	var interactionMethods = _interopRequireWildcard(_interactionMethods);

	var _utilityMethods = __webpack_require__(8);

	var utilityMethods = _interopRequireWildcard(_utilityMethods);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var navigateTo = function navigateTo(path) {
	  return window.history.pushState({}, '', path);
	};

	var Page = function () {
	  function Page(reactElement) {
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        _ref$initialPath = _ref.initialPath,
	        initialPath = _ref$initialPath === undefined ? '/' : _ref$initialPath;

	    _classCallCheck(this, Page);

	    navigateTo(initialPath);
	    this.wrapper = (0, _enzyme.mount)(reactElement);
	    this.focusedWrapper = null;
	  }

	  _createClass(Page, [{
	    key: 'destroy',
	    value: function destroy() {
	      this.wrapper.unmount();
	      navigateTo('/');
	    }
	  }]);

	  return Page;
	}();

	Object.assign(Page.prototype, findWrapperMethods, interactionMethods, utilityMethods);

	exports.default = Page;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.findWrapperForCheck = findWrapperForCheck;
	exports.findWrapperForChoose = findWrapperForChoose;
	exports.findWrapperForClickButton = findWrapperForClickButton;
	exports.findWrapperForClickInput = findWrapperForClickInput;
	exports.findWrapperForClickLink = findWrapperForClickLink;
	exports.findWrapperForFillIn = findWrapperForFillIn;
	exports.findWrapperForFillInTextarea = findWrapperForFillInTextarea;
	exports.findWrapperForSelect = findWrapperForSelect;
	exports.findWrapper = findWrapper;

	var _formatPropsToCheck = __webpack_require__(4);

	var _formatPropsToCheck2 = _interopRequireDefault(_formatPropsToCheck);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function findWrapperForCheck(propValue) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'name'];
	  return this.findWrapper('input', propValue, {
	    propsToCheck: propsToCheck,
	    requiredProps: { type: ['checkbox'] }
	  });
	}

	function findWrapperForChoose(propValue) {
	  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref2.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'name'];
	  return this.findWrapper('input', propValue, {
	    propsToCheck: propsToCheck,
	    requiredProps: { type: ['radio'] }
	  });
	}

	function findWrapperForClickButton(propValue) {
	  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref3.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'children'];
	  return this.findWrapper('button', propValue, { propsToCheck: propsToCheck });
	}

	function findWrapperForClickInput(propValue) {
	  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref4.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'value'];
	  return this.findWrapper('input', propValue, {
	    propsToCheck: propsToCheck,
	    requiredProps: { type: ['submit'] }
	  });
	}

	function findWrapperForClickLink(propValue) {
	  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref5.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'children', 'href'];
	  return this.findWrapper('a', propValue, { propsToCheck: propsToCheck });
	}

	function findWrapperForFillIn(propValue) {
	  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref6.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'name', 'placeholder'];
	  return this.findWrapper('input', propValue, {
	    propsToCheck: propsToCheck,
	    requiredProps: { type: [undefined, 'email', 'password', 'text'] }
	  });
	}

	function findWrapperForFillInTextarea(propValue) {
	  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      propToCheck = _ref7.propToCheck;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'name', 'placeholder'];
	  return this.findWrapper('textarea', propValue, { propsToCheck: propsToCheck });
	}

	function findWrapperForSelect(propValue, childrenPropValueForOption) {
	  var _ref8 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      propToCheck = _ref8.propToCheck,
	      showDebuggingInfo = _ref8.showDebuggingInfo;

	  var propsToCheck = propToCheck ? [propToCheck] : ['id', 'name'];
	  var foundSelectWrapper = false;

	  var wrapper = this.wrapper.findWhere(function (wrapper) {
	    if (wrapper.type() !== 'select') {
	      return false;
	    }

	    var wrapperProps = wrapper.props();
	    var hasMatchingPropValue = propsToCheck.some(function (propName) {
	      var wrapperPropValue = wrapperProps[propName];
	      return wrapperPropValue === propValue;
	    });
	    var matchingOptions = wrapper.find('option[children="' + childrenPropValueForOption + '"]');
	    var hasMatchingOptions = matchingOptions.exists();
	    var hasOnlyOneMatchingOption = hasMatchingOptions && matchingOptions.length === 1;

	    if (showDebuggingInfo && hasMatchingPropValue) {
	      foundSelectWrapper = true;
	      hasMatchingOptions ? hasOnlyOneMatchingOption ? console.log('matching select React element whose children include a matching option React element was found: ' + wrapper.debug().replace(/\n\s*/g, '')) : console.log('matching select React element was found, but its children include more than one option React element whose children prop value matched \'' + childrenPropValueForOption + '\': ' + wrapper.debug().replace(/\n\s*/g, '')) : console.log('matching select React element was found, but its children did not include an option React element whose children prop value matched \'' + childrenPropValueForOption + '\': ' + wrapper.debug().replace(/\n\s*/g, ''));
	    }

	    return hasMatchingPropValue && hasOnlyOneMatchingOption;
	  });

	  if (showDebuggingInfo && !foundSelectWrapper) {
	    console.log('no select React element was found whose ' + (0, _formatPropsToCheck2.default)(propsToCheck) + ' prop value matches \'' + propValue + '\'');
	  }

	  return wrapper;
	}

	function findWrapper(type, propValue) {
	  var _ref9 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref9$propsToCheck = _ref9.propsToCheck,
	      propsToCheck = _ref9$propsToCheck === undefined ? ['id'] : _ref9$propsToCheck,
	      _ref9$requiredProps = _ref9.requiredProps,
	      requiredProps = _ref9$requiredProps === undefined ? {} : _ref9$requiredProps;

	  return this.wrapper.findWhere(function (wrapper) {
	    if (wrapper.type() !== type) {
	      return false;
	    }

	    var wrapperProps = wrapper.props();
	    var hasRequiredProps = Object.keys(requiredProps).every(function (propName) {
	      var validValuesForRequiredProp = requiredProps[propName];
	      var wrapperRequiredPropValue = wrapperProps[propName];
	      return validValuesForRequiredProp.indexOf(wrapperRequiredPropValue) !== -1;
	    });

	    return hasRequiredProps && propsToCheck.some(function (propName) {
	      var wrapperPropValue = wrapperProps[propName];
	      return wrapperPropValue === propValue;
	    });
	  });
	}

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = formatPropsToCheck;
	function formatPropsToCheck(propsToCheck) {
	  var propsToCheckLength = propsToCheck.length;
	  switch (propsToCheckLength) {
	    case 1:
	      return propsToCheck[0];
	    case 2:
	      return propsToCheck[0] + ' or ' + propsToCheck[1];
	    default:
	      var lastProp = propsToCheck[propsToCheckLength - 1];
	      return propsToCheck.slice(0, -1).join(', ') + ', or ' + lastProp;
	  }
	}

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.blurFocusedElement = blurFocusedElement;
	exports.check = check;
	exports.choose = choose;
	exports.clickButton = clickButton;
	exports.clickInput = clickInput;
	exports.clickLink = clickLink;
	exports.fillIn = fillIn;
	exports.fillInTextarea = fillInTextarea;
	exports.select = select;
	exports.uncheck = uncheck;

	var _checkOnlyOneNodeExists = __webpack_require__(6);

	var _checkOnlyOneNodeExists2 = _interopRequireDefault(_checkOnlyOneNodeExists);

	var _blurAndFocusWrappersIfNecessary = __webpack_require__(7);

	var _blurAndFocusWrappersIfNecessary2 = _interopRequireDefault(_blurAndFocusWrappersIfNecessary);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function blurFocusedElement() {
	  if (this.focusedWrapper) {
	    this.focusedWrapper.simulate('blur');
	    this.focusedWrapper = null;
	  }
	  return this;
	}

	function check(propValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForCheck.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'check', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);

	  var _wrapper$props = wrapper.props(),
	      name = _wrapper$props.name,
	      _wrapper$props$value = _wrapper$props.value,
	      value = _wrapper$props$value === undefined ? 'on' : _wrapper$props$value;

	  wrapper.simulate('change', {
	    target: {
	      checked: true,
	      type: 'checkbox',
	      name: name,
	      value: value
	    }
	  });

	  return this;
	}

	function choose(propValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForChoose.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'choose', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);

	  var _wrapper$props2 = wrapper.props(),
	      name = _wrapper$props2.name,
	      _wrapper$props2$value = _wrapper$props2.value,
	      value = _wrapper$props2$value === undefined ? 'on' : _wrapper$props2$value;

	  wrapper.simulate('change', {
	    target: {
	      checked: true,
	      type: 'radio',
	      name: name,
	      value: value
	    }
	  });

	  return this;
	}

	function clickButton(propValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForClickButton.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'clickButton', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);
	  wrapper.simulate('click');
	  wrapper.simulate('submit');
	  return this;
	}

	function clickInput(propValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForClickInput.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'clickInput', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);
	  wrapper.simulate('click');
	  wrapper.simulate('submit');
	  return this;
	}

	function clickLink(propValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForClickLink.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'clickLink', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);
	  wrapper.simulate('click', { button: 0 });
	  return this;
	}

	function fillIn(propValue, eventTargetValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForFillIn.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'fillIn', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);
	  wrapper.simulate('change', {
	    target: {
	      value: eventTargetValue,
	      name: wrapper.props().name
	    }
	  });
	  return this;
	}

	function fillInTextarea(propValue, eventTargetValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForFillInTextarea.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'fillInTextarea', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);
	  wrapper.simulate('change', {
	    target: {
	      value: eventTargetValue,
	      name: wrapper.props().name
	    }
	  });
	  return this;
	}

	function select(propValue, childrenPropValueForOption, options) {
	  var findWrapperMethodArguments = [propValue, childrenPropValueForOption, options];
	  var wrapper = this.findWrapperForSelect.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'select', findWrapperMethodArguments, arguments);
	  var option = wrapper.find('option[children="' + childrenPropValueForOption + '"]');
	  var optionValue = option.props().value;
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);
	  wrapper.simulate('change', {
	    target: {
	      value: optionValue,
	      name: wrapper.props().name
	    }
	  });
	  return this;
	}

	function uncheck(propValue, options) {
	  var findWrapperMethodArguments = [propValue, options];
	  var wrapper = this.findWrapperForCheck.apply(this, findWrapperMethodArguments);
	  (0, _checkOnlyOneNodeExists2.default)(wrapper, 'check', findWrapperMethodArguments, arguments);
	  (0, _blurAndFocusWrappersIfNecessary2.default)(this, wrapper);

	  var _wrapper$props3 = wrapper.props(),
	      name = _wrapper$props3.name,
	      _wrapper$props3$value = _wrapper$props3.value,
	      value = _wrapper$props3$value === undefined ? 'on' : _wrapper$props3$value;

	  wrapper.simulate('change', {
	    target: {
	      checked: false,
	      type: 'checkbox',
	      name: name,
	      value: value
	    }
	  });
	  return this;
	}

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = checkOnlyOneNodeExists;
	var formatArgs = function formatArgs(args) {
	  return args.filter(function (arg) {
	    return arg !== undefined;
	  }).map(function (arg) {
	    switch (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) {
	      case 'string':
	        return '\'' + arg + '\'';
	      case 'object':
	        return JSON.stringify(arg);
	      default:
	        return '';
	    }
	  }).join(', ');
	};

	function checkOnlyOneNodeExists(wrapper, methodName, findWrapperMethodArguments, args) {
	  var wrapperLength = wrapper.length;

	  if (wrapperLength !== 1) {
	    var message = void 0;
	    var formattedArgs = formatArgs(Array.prototype.slice.call(args));
	    var formattedFindWrapperMethodArgs = formatArgs(findWrapperMethodArguments);
	    var findWrapperMethodName = 'findWrapperFor' + (methodName.charAt(0).toUpperCase() + methodName.slice(1));
	    if (wrapperLength === 0) {
	      message = '.' + methodName + '(' + formattedArgs + ') failed because no matching React elements were found by .' + findWrapperMethodName + '(' + formattedFindWrapperMethodArgs + ')';
	    }

	    if (wrapperLength > 1) {
	      message = '.' + methodName + '(' + formattedArgs + ') failed because ' + wrapperLength + ' matching React elements were found by .' + findWrapperMethodName + '(' + formattedFindWrapperMethodArgs + ')';
	    }

	    throw new Error(message);
	  }
	}

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = blurAndFocusWrappersIfNecessary;
	function blurAndFocusWrappersIfNecessary(page, wrapper) {
	  var shouldFocusWrapper = !page.focusedWrapper || page.focusedWrapper.getNode() !== wrapper.getNode();

	  if (shouldFocusWrapper) {
	    if (page.focusedWrapper) {
	      page.focusedWrapper.simulate('blur');
	    }

	    wrapper.simulate('focus');
	    page.focusedWrapper = wrapper;
	  }
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.waitUntil = undefined;
	exports.content = content;
	exports.contentMatches = contentMatches;
	exports.currentPath = currentPath;
	exports.outputOpenPageCode = outputOpenPageCode;

	var _interpolateToCode = __webpack_require__(9);

	var _interpolateToCode2 = _interopRequireDefault(_interpolateToCode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function content() {
	  return this.wrapper.text();
	}

	function contentMatches(matcher) {
	  var regularExpression = matcher.constructor.name === 'RegExp' ? matcher : new RegExp(matcher);

	  return regularExpression.test(this.wrapper.text());
	}

	function currentPath() {
	  return window.location.pathname;
	}

	function outputOpenPageCode() {
	  var message = (0, _interpolateToCode2.default)(this.wrapper.html());
	  console.log(message);
	}

	var formatCallbackOutput = function formatCallbackOutput(callback) {
	  return callback.toString().replace(/\s*\n\s*/g, ' ');
	};

	function waitUntil(callback) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$delay = _ref.delay,
	      delay = _ref$delay === undefined ? waitUntil.defaultDelay : _ref$delay,
	      _ref$numberOfTries = _ref.numberOfTries,
	      numberOfTries = _ref$numberOfTries === undefined ? waitUntil.numberOfTries : _ref$numberOfTries;

	  return new Promise(function (resolve, reject) {
	    var intervalId = void 0,
	        callbackInvocationCount = 0;

	    intervalId = setInterval(function () {
	      callbackInvocationCount += 1;

	      if (callback()) {
	        clearInterval(intervalId);
	        resolve(callbackInvocationCount);
	      } else {
	        if (callbackInvocationCount === numberOfTries) {
	          var message = 'Invoked ' + formatCallbackOutput(callback) + ' every ' + delay + ' millisecond(s) ' + numberOfTries + ' time(s), but the callback never returned true';
	          reject(new Error(message));
	        }
	      }
	    }, delay);
	  });
	}

	waitUntil.defaultDelay = 10;
	waitUntil.numberOfTries = 50;

	exports.waitUntil = waitUntil;

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = interpolateToCode;
	var interpolatedHTML = function interpolatedHTML(body) {
	  return ('<!DOCTYPE html><html><head><meta charset="utf-8"><title>React Page Object Preview</title></head><body>' + body + '</body></html>').replace(/`/g, '\\`');
	};

	function interpolateToCode(body) {
	  return 'PASTE THE FOLLOWING INTO YOUR BROWSER CONSOLE:\nwindow.open().document.write(`' + interpolatedHTML(body) + '`)\n';
	}

/***/ }
/******/ ])
});
;